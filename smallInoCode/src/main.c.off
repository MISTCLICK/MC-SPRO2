#include <avr/io.h>
#include <stdio.h>
#include <util/delay.h>
#include <avr/interrupt.h>

#include "i2cmaster.h"
#include "usart.h"
#include "functions.h"

#define AS5600_ADDR 0x36 // 7-bit I2C address of AS5600

uint16_t AS5600_ReadAngle(void);
void timer_init(void);

int main(void)
{
   
    uart_init();
    io_redirect();
    i2c_init(); // Initialize I2C
    // timer_init();
    _delay_ms(100); // Give sensor time to power up

    sei();

    printf("breakpoin 1\n");

    motor_init();
    motor_control(255, 1);
    printf("breakpoin 2\n");

    float prev_angle, diff;
    uint16_t rpm;

    while (1)
    {
        printf("breakpoin 3\n");

        _delay_ms(1000); // Read every 500ms
        uint16_t angle = AS5600_ReadAngle();

        // Convert angle to degrees
        float degrees = (angle * 360.0) / 4096.0;

        if (!prev_angle)
        {
            prev_angle = degrees;
            continue;
        }

        if (degrees < prev_angle)
        {
            diff = degrees + 360.0 - prev_angle;
        }
        else
        {
            diff = degrees - prev_angle;
        }

        rpm = calculate_RPM((uint16_t)diff);

        printf("angle %.2f rpm %d \n", degrees, rpm);
    }

    return 0;
}

uint16_t AS5600_ReadAngle(void)
{
    uint16_t angle;

    i2c_start((AS5600_ADDR << 1) | I2C_WRITE); // Start + Write mode
    i2c_write(0x0C);                           // Address of angle high byte register
    i2c_stop();                                // Stop to finish write

    i2c_start((AS5600_ADDR << 1) | I2C_READ); // Start + Read mode
    uint8_t high = i2c_readAck();             // Read high byte
    uint8_t low = i2c_readNak();              // Read low byte
    i2c_stop();                               // Stop communication

    angle = ((uint16_t)high << 8) | low;
    return angle & 0x0FFF; // AS5600 only uses the lower 12 bits
}

void timer_init(void)
{
    DDRB |= (1 << PB5);
    TCCR2A |= (0 << WGM20) | (1 << WGM21);                            // use these to set mode (already in ctc mode)
    TCCR2B |= (0 << WGM22) | (1 << CS20) | (1 << CS21) | (0 << CS22); // use ctc mode and prescaler
    OCR2A = 249;                                                      // set timer count up to here
    TIMSK2 |= (1 << OCIE2A);                                          // interrupt when OCR0A is reached

    TCNT0 = 0;
}